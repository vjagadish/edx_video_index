1
00:00:00,280 --> 00:00:01,710
Hi and welcome back.

2
00:00:01,710 --> 00:00:06,260
In the last module, we showed you that a
macro can simply repeat a chunk of code.

3
00:00:06,260 --> 00:00:09,050
This is a lot easier than manually copy
and pasting the code and

4
00:00:09,050 --> 00:00:11,990
then just tweaking the variables you want
to change.

5
00:00:11,990 --> 00:00:14,080
>> This is actually how a macro works
behind the scenes.

6
00:00:14,080 --> 00:00:17,120
You just have to tell it what things to
tweak and how to tweak them,

7
00:00:17,120 --> 00:00:20,380
and then it will automatically run and
modify the code for you.

8
00:00:20,380 --> 00:00:21,440
Here's the code from last time.

9
00:00:23,160 --> 00:00:25,730
We want to use this code multiple times so
we'll turn it into a macro.

10
00:00:26,940 --> 00:00:28,900
Now I'll show you the syntax for turning
things into a macro.

11
00:00:30,350 --> 00:00:36,455
>> You always want to start a macro with
%macro, and end a macro with %mend.

12
00:00:38,528 --> 00:00:42,300
>> %macro and %mend tell sassy what to
repeat,

13
00:00:42,300 --> 00:00:45,640
this chunk of code that's between them,
every time you want to run the macro.

14
00:00:47,570 --> 00:00:50,015
Before we move on, I'll make a quick note
about making macros.

15
00:00:51,230 --> 00:00:54,890
Notice how when I added %macro and %mend,
the color coding went away?

16
00:00:54,890 --> 00:00:59,850
The color coding is really helpful for
catching mistakes and typos in your code.

17
00:00:59,850 --> 00:01:03,990
If your building macro from scratch, write
the code and test it first.

18
00:01:03,990 --> 00:01:05,930
And then add %macro and %mend.

19
00:01:06,998 --> 00:01:10,210
>> After the %macro statement you can
specify the name of

20
00:01:10,210 --> 00:01:11,650
the macro your creating.

21
00:01:11,650 --> 00:01:16,780
In this case we'll call ours MakeBMI, just
like we showed you in the previous module.

22
00:01:18,190 --> 00:01:22,190
Remember a macro's a function you have to
give it some information and

23
00:01:22,190 --> 00:01:24,190
it will perform operations.

24
00:01:24,190 --> 00:01:27,170
The information that you give must be
enclosed in parentheses.

25
00:01:27,170 --> 00:01:29,900
So let's put some parentheses after
MakeBMI.

26
00:01:29,900 --> 00:01:31,750
For now we're going to leave these
empties.

27
00:01:31,750 --> 00:01:33,330
But soon we'll fill them in with
information.

28
00:01:35,300 --> 00:01:37,310
>> At this point we have a fully
functioning macro.

29
00:01:38,440 --> 00:01:41,140
What we've done so far is tell SAS that we
want to make a macro,

30
00:01:41,140 --> 00:01:43,350
and that we'll repeat this chunk of code.

31
00:01:43,350 --> 00:01:47,110
And I've also said that our macro is
going to be called MakeBMI.

32
00:01:47,110 --> 00:01:50,760
We won't be giving it any information.

33
00:01:51,800 --> 00:01:54,650
It's not a very interesting macro, since
it doesn't make any change to the code,

34
00:01:54,650 --> 00:01:57,230
but sometimes that's all you need.

35
00:01:57,230 --> 00:01:59,990
Every time we run this macro, it'll run
this same identical chunk of code.

36
00:01:59,990 --> 00:02:02,720
Let's take a look at how we can use this
macro.

37
00:02:04,680 --> 00:02:07,040
>> In order to use this macro, we first
have to run the code.

38
00:02:11,250 --> 00:02:12,920
Now that we've run this macro code,

39
00:02:12,920 --> 00:02:15,920
it is temporarily stored in our computers
memory.

40
00:02:15,920 --> 00:02:19,350
Writing this code is not the same thing as
using our macro.

41
00:02:19,350 --> 00:02:22,190
Running it just stores our macro in the
computer's memory so

42
00:02:22,190 --> 00:02:24,760
that it's ready whenever we want to invoke
our macro.

43
00:02:26,570 --> 00:02:29,019
>> Whenever I want to use his macro, I
need to invoke it.

44
00:02:32,050 --> 00:02:33,340
This is how you can invoke a macro.

45
00:02:33,340 --> 00:02:39,840
To invoke a macro,

46
00:02:39,840 --> 00:02:42,530
all I have to do is write %makeBMI [SOUND]
and

47
00:02:42,530 --> 00:02:49,730
then the parentheses, semi colon and then
click Run.

48
00:02:53,170 --> 00:02:56,530
As you can see, we invoked the macro and
SAS ran that chunk of code you wanted.

49
00:02:58,030 --> 00:03:01,030
It's important to note that we can only
invoke a macro if we've already run

50
00:03:01,030 --> 00:03:03,980
the macro code earlier in that SAS
session.

51
00:03:03,980 --> 00:03:05,580
This means that if I close SAS now and

52
00:03:05,580 --> 00:03:08,970
restart it, I'll have to rerun the
original macro code somewhere in my

53
00:03:08,970 --> 00:03:11,050
process flow before I can invoke that
macro again.
